require('dotenv').config();

const {getAssets, getHistoricalData} = require('./services/binance');
const {getCombinedNews} = require('./services/news');
//const { analyzeNews } = require('./services/openai');
const {analyzeNews} = require('./services/ollama');
//const {createPDF} = require('./services/pdf');
const {sendChartToTelegram, sendFullReportToTelegram, sendBriefReportToTelegram} = require('./services/telegram');
const TelegramBot = require('node-telegram-bot-api');
const cron = require('cron');
const fs = require('fs');
const path = require('path');
const {getIndicators} = require("./services/indicators");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {polling: true});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞

async function runAnalysis(chatId) {
    try {
        const assets = await getAssets();

        let fullReport = `üìä *Daily Crypto News Analysis test* üìä\n\n`;

        for (let asset of assets) {
            const news = await getCombinedNews(asset.symbol);

            const importantNews = filterNews(news);
            const newNews = filterNewTitles(asset.symbol, importantNews);

            if (newNews.length === 0) {
                console.log(`–ù–æ–≤—ã—Ö –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è ${asset.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
                continue;
            }

            console.log(`–ù–∞–π–¥–µ–Ω–æ ${newNews.length} –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è ${asset.symbol}.`);

            const data = await getHistoricalData(asset.symbol, interval = '1d', limit = 300);
            const indicators = await getIndicators(data);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ OpenAI
            const analysis = await analyzeNews(asset.symbol, newNews, data, indicators );
            //await createPDF(analysis, filePath, asset.symbol);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
            await sendBriefReportToTelegram(asset.symbol, analysis, chatId);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
            //fullReport += `üîπ *${asset.symbol} News*:\n`;
            //fullReport += `${analysis}\n\n`;  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–Ω–µ—Ç—ã

            await sendChartToTelegram(chatId, asset.symbol, data, indicators, news);
        }

        bot.sendMessage(chatId, '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        //await sendFullReportToTelegram( escapeMarkdownV2(fullReport), chatId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.');
    }
}

function escapeMarkdownV2(text) {
    return text
        .replace(/_/g, '\\_')
        .replace(/\*/g, '\\*')
        .replace(/\[/g, '\\[')
        .replace(/\]/g, '\\]')
        .replace(/\(/g, '\\(')
        .replace(/\)/g, '\\)')
        .replace(/~/g, '\\~')
        .replace(/`/g, '\\`')
        .replace(/>/g, '\\>')
        .replace(/#/g, '\\#')
        .replace(/\+/g, '\\+')
        .replace(/-/g, '\\-')
        .replace(/=/g, '\\=')
        .replace(/\|/g, '\\|')
        .replace(/\./g, '\\.')   // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
        .replace(/!/g, '\\!');
}

function filterNews(news) {
    const fundamentalKeywords = ['regulation', 'partnership', 'update', 'development', 'technology', 'integration'];
    const speculativeKeywords = ['price', 'volatility', 'capital flow', 'whale', 'dump', 'pump'];

    return news.filter(article => {
        const content = `${article.title} ${article.description}`.toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const isFundamental = fundamentalKeywords.some(keyword => content.includes(keyword));
        const isSpeculative = speculativeKeywords.some(keyword => content.includes(keyword));

        return isFundamental || isSpeculative; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(directory) {
    if (!fs.existsSync(directory)) {
        fs.mkdirSync(directory, {recursive: true});
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function readProcessedTitles(symbol) {
    const directoryPath = path.join(__dirname, 'titles');
    const filePath = path.join(directoryPath, `${symbol}_titles.json`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(directoryPath);

    if (fs.existsSync(filePath)) {
        const data = fs.readFileSync(filePath, 'utf-8');
        return JSON.parse(data);
    }

    return []; // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ñ–∞–π–ª
function writeProcessedTitles(symbol, titles) {
    const directoryPath = path.join(__dirname, 'titles');
    const filePath = path.join(directoryPath, `${symbol}_titles.json`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(directoryPath);

    fs.writeFileSync(filePath, JSON.stringify(titles, null, 2), 'utf-8');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function filterNewTitles(symbol, news) {
    const processedTitles = readProcessedTitles(symbol);
    const newNews = news.filter(article => !processedTitles.includes(article.title));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const updatedTitles = [...processedTitles, ...newNews.map(article => article.title)];
    writeProcessedTitles(symbol, updatedTitles);

    return newNews;
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /get_report, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–æ—Ç—á–µ—Ç, –∏–ª–∏ –∂–¥–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get_report –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä—É—á–Ω—É—é
bot.onText(/\/get_report/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑...');
    runAnalysis(chatId);
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞
const scheduledJob = new cron.CronJob('0 9 * * *', () => {
    const chatId = process.env.TELEGRAM_CHAT_ID;
    bot.sendMessage(chatId, '–ó–∞–ø—É—Å–∫–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...');
    runAnalysis(chatId);
}, null, true, 'Europe/Kiev');


scheduledJob.start();